name: Release .NET Framework App

on:
  push:
    branches: [ "main" ]
    paths:
      - "ColorPicker/Properties/AssemblyInfo.cs" # Trigger workflow on changes in AssemblyInfo.cs
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write

    runs-on: windows-2022

    env:
      Solution_Name: ColorPicker.sln
      Project_Path: ColorPicker/ColorPicker.csproj
      Assembly_Path: ColorPicker/Properties/AssemblyInfo.cs

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1
      with:
        msbuild-architecture: x64

    - name: Restore the application
      run: msbuild ${{ env.Solution_Name }} /t:restore

    - name: Before Build Command
      run: msbuild ${{ env.Solution_Name }} /p:Configuration=Release

    - name: Build the application in Release mode
      run: msbuild ${{ env.Project_Path }} /t:Publish /p:Configuration=Release /p:OutputPath=ColorPicker/bin/Release

    - name: Get version from AssemblyInfo.cs
      id: get_version
      shell: pwsh
      run: |
        $assemblyInfoPath = "${{ env.Assembly_Path }}"
        $assemblyInfoContent = Get-Content $assemblyInfoPath -Raw
        $versionPattern = '\[assembly: AssemblyVersion\("(\d+\.\d+\.\d+\.\d+)"\)\]'
        $versionMatch = [regex]::Match($assemblyInfoContent, $versionPattern)
        $assemblyVersion = $versionMatch.Groups[1].Value

        $VERSION = $assemblyVersion
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Create version tag
      shell: pwsh
      run: |
        $tagName = "v$env:VERSION"
        echo "TAG_NAME=$tagName" | Out-File -FilePath $env:GITHUB_ENV -Append
        git tag $tagName
        git push origin $tagName

    - name: Create and Publish Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: ${{ env.TAG_NAME }}
        files: ColorPicker/bin/Release/ColorPicker.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}